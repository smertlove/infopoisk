КОМПИЛИРОВАНИЕ
    node-sass input.sass output.css
    https://beautifytools.com/sass-compiler.php
    
КОДИРОВКА
Чтобы избежать потенциальных проблем с кодировкой символов, крайне рекомендуется использовать кодировку UTF-8 в основной таблице стилей, используя директиву @charset. Убедитесь, что она идёт первой строкой в таблице стилей и перед ней ничего нет.
    @charset 'utf-8';
        
ПЕРЕМЕННЫЕ
Переменные работают по такому же принципу, как и в любом языке программирования. Объявляя переменную, мы храним в ней какое-либо значение, которое обычно встречается в CSS в виде цвета, шрифта или целого набора свойств, например для box-shadow.

Идея в том, что данный подход упрощает процесс повторного использования переменных, а также мы можем быстро изменить значение конкретной переменной там, где мы её объявляем, вместо повсеместного перепечатывания кода.
        
$title-font: normal 24px/1.5 'Open Sans', sans-serif
$cool-red: #F44336
$box-shadow-bottom-only: 0 2px 1px 0 rgba(0, 0, 0, 0.2)

h1.title
    font: $title-font
    color: $cool-red
    

div.container
    color: $cool-red
    background: #fff
    width: 100%
    box-shadow: $box-shadow-bottom-only
    

МИКСИНЫ Mixin (примеси)
Mixin можно также представить как класс-конструктор в языке программирования: вы используете ряд свойств из CSS, создавая отдельный объект, который потом используете где хотите, задавая разные значения его свойствам.
    
@mixin square($size, $color)
    width: $size
    height: $size
    background-color: $color

.small-blue-square
    @include square(20px, rgb(0,0,255))

.big-red-square
    @include square(300px, rgb(255,0,0))

Ещё один способ упростить себе работу с помощью Mixin - использование его в местах, где требуются префиксы для адаптации под разные браузеры.
    
@mixin transform-tilt()
    $tilt: rotate(15deg)
    -webkit-transform: $tilt 
    -ms-transform: $tilt
    transform: $tilt

.frame:hover
    @include transform-tilt

ЭКСТЕНДЫ Extend
Следующая особенность, на которую мы взглянем, будет @extend, она позволяет вам наследовать CSS-свойства одного селектора от другого. Принцип работы напоминает Mixin, но Extend, как правило, используется для того, чтобы создать логическую связь между элементами страницы.

Extend используется, когда нам, к примеру, нужно два похожих элемента, которые имеют некоторые отличия. Например, давайте возьмём две кнопки: согласие и отмена.

Если вы взгляните на CSS код, то заметите, что Sass скомбинировал селекторы вместо повторения одних и тех же строк несколько раз в коде.
        
.dialog-button
    box-sizing: border-box
    color: #ffffff
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.12)
    padding: 12px 40px
    cursor: pointer

.confirm
    @extend .dialog-button
    background-color: #87bae1
    float: left

.cancel
    @extend .dialog-button
    background-color: #e4749e
    float: right


ВЛОЖЕННЫЕ КОНСТРУКЦИИ
Как известно, в HTML, как правило, программист пишет код по принципу "гнездования". Иными словами, блоки кода находятся в других блоках кода и содержат вложенные блоки кода. CSS же в этом плане представляет собой полнейший хаос. Если для вас это проблема, Sass может помочь вам в организации кода.
    
ul
    list-style: none
    
    li
        padding: 15px
        display: inline-block
        
        a
            text-decoration: none
            font-size: 16px
            color: #444

ОПЕРАЦИИ
Вы можете выполнять различные математические операции прямо в коде, что значительно упрощает работу в некоторых случаях.

Хоть сейчас и обычный CSS предлагает те же возможности, правда в форме calc(), альтернативный вариант на Sass быстрее в написании, имеет операцию mod (%) и применяется на более широком спектре типов данных (цвета, строки).
    
$width: 800px

.container
    width: $width

.column-half
    width: $width / 2

.column-fifth
    width: $width / 5
    

ФУНКЦИИ
В Sass имеется целый ряд встроенных функций разного рода. К примеру, функции для операций со строками, цветами или выполняющие различные математические операции вроде random() или round().

Чтобы было нагляднее, представим функцию darken($color, $amount), которая, как понятно из названия, затемняет или применяет hover.
        
$awesome-blue: #2196F3

a
    padding: 10px 15px
    background-color: $awesome-blue

a:hover
    background-color: darken($awesome-blue,10%)